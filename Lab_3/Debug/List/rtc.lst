###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           19/Nov/2015  14:22:16
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\rtc.c
#    Command line  =  
#        I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\rtc.c -lcN
#        I:\IAR\EE312\Lab_3\Debug\List\ -o I:\IAR\EE312\Lab_3\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR4133__ -e --double=32 --dlib_config
#        E:\IAR-new\430\lib\dlib\dl430xlsfn.h -I I:\IAR\EE312\Lab_3\..\ -I
#        I:\IAR\EE312\Lab_3\..\driverlib\MSP430FR2xx_4xx\ --core=430X
#        --data_model=small -Ol --hw_workaround=CPU40 --segment __data16=DATA16
#        --segment __data20=DATA20 --code_model=large
#    List file     =  I:\IAR\EE312\Lab_3\Debug\List\rtc.lst
#    Object file   =  I:\IAR\EE312\Lab_3\Debug\Obj\rtc.r43
#
###############################################################################

I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\rtc.c
      1          /* --COPYRIGHT--,BSD
      2           * Copyright (c) 2014, Texas Instruments Incorporated
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * *  Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           *
     12           * *  Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in the
     14           *    documentation and/or other materials provided with the distribution.
     15           *
     16           * *  Neither the name of Texas Instruments Incorporated nor the names of
     17           *    its contributors may be used to endorse or promote products derived
     18           *    from this software without specific prior written permission.
     19           *
     20           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21           * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     22           * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     23           * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     24           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     25           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     26           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
     27           * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     28           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     29           * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           * --/COPYRIGHT--*/
     32          //*****************************************************************************
     33          //
     34          // rtc.c - Driver for the rtc Module.
     35          //
     36          //*****************************************************************************
     37          
     38          //*****************************************************************************
     39          //
     40          //! \addtogroup rtc_api rtc
     41          //! @{
     42          //
     43          //*****************************************************************************
     44          
     45          #include "inc/hw_regaccess.h"
     46          #include "inc/hw_memmap.h"
     47          
     48          #ifdef __MSP430_HAS_RTC__
     49          #include "rtc.h"
     50          
     51          #include <assert.h>
     52          
     53          void RTC_init(uint16_t baseAddress,
     54                        uint16_t modulo,
     55                        uint16_t clockPredivider)
     56          {
     57              assert(clockPredivider == RTC_CLOCKPREDIVIDER_1
     58                     || clockPredivider == RTC_CLOCKPREDIVIDER_10
     59                     || clockPredivider == RTC_CLOCKPREDIVIDER_100
     60                     || clockPredivider == RTC_CLOCKPREDIVIDER_1000
     61                     || clockPredivider == RTC_CLOCKPREDIVIDER_16
     62                     || clockPredivider == RTC_CLOCKPREDIVIDER_64
     63                     || clockPredivider == RTC_CLOCKPREDIVIDER_256
     64                     || clockPredivider == RTC_CLOCKPREDIVIDER_1024);
     65          
     66              HWREG16(baseAddress + OFS_RTCCTL) &= ~(RTCSS_3 | RTCPS_7);
     67          
     68              HWREG16(baseAddress + OFS_RTCMOD) = modulo;
     69              HWREG16(baseAddress + OFS_RTCCTL) |= clockPredivider;
     70          }
     71          
     72          void RTC_start(uint16_t baseAddress,
     73                         uint16_t clockSource)
     74          {
     75              assert(clockSource == RTC_CLOCKSOURCE_DISABLED
     76                     || clockSource == RTC_CLOCKSOURCE_SMCLK
     77                     || clockSource == RTC_CLOCKSOURCE_XT1CLK
     78                     || clockSource == RTC_CLOCKSOURCE_VLOCLK);
     79          
     80              HWREG16(baseAddress + OFS_RTCCTL) &= ~RTCSS_3;
     81          
     82              HWREG16(baseAddress + OFS_RTCCTL) |= clockSource;
     83              HWREG16(baseAddress + OFS_RTCCTL) |= RTCSR;
     84          }
     85          
     86          void RTC_stop(uint16_t baseAddress)
     87          {
     88              HWREG16(baseAddress + OFS_RTCCTL) &= ~RTCSS_3;
     89          }
     90          
     91          void RTC_setModulo(uint16_t baseAddress,
     92                             uint16_t modulo)
     93          {
     94              HWREG16(baseAddress + OFS_RTCMOD) = modulo;
     95          }
     96          
     97          void RTC_enableInterrupt(uint16_t baseAddress,
     98                                   uint8_t interruptMask)
     99          {
    100              assert(interruptMask & RTCIE);
    101          
    102              if(interruptMask & RTCIE)
    103              {
    104                  HWREG16(baseAddress + OFS_RTCCTL) |= RTCIE;
    105              }
    106          }
    107          
    108          void RTC_disableInterrupt(uint16_t baseAddress,
    109                                    uint8_t interruptMask)
    110          {
    111              assert(interruptMask & RTCIE);
    112          
    113              if(interruptMask & RTCIE)
    114              {
    115                  HWREG16(baseAddress + OFS_RTCCTL) &= ~RTCIE;
    116              }
    117          }
    118          
    119          uint8_t RTC_getInterruptStatus(uint16_t baseAddress,
    120                                         uint8_t interruptFlagMask)
    121          {
    122              uint8_t intStatus = 0;
    123          
    124              assert(interruptFlagMask & RTCIF);
    125          
    126              if(interruptFlagMask & RTCIF)
    127              {
    128                  intStatus = (uint8_t)(HWREG16(baseAddress + OFS_RTCCTL) & RTCIF);
    129              }
    130          
    131              return(intStatus);
    132          }
    133          
    134          void RTC_clearInterrupt(uint16_t baseAddress,
    135                                  int8_t interruptFlagMask)
    136          {
    137              assert(interruptFlagMask & RTCIF);
    138          
    139              HWREG16(baseAddress + OFS_RTCCTL) &= ~RTCIF;
    140          }
    141          
    142          #endif
    143          //*****************************************************************************
    144          //
    145          //! Close the doxygen group for rtc_api
    146          //! @}
    147          //
    148          //*****************************************************************************

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   RTC_clearInterrupt
      4   RTC_disableInterrupt
      4   RTC_enableInterrupt
      4   RTC_getInterruptStatus
      4   RTC_init
      4   RTC_setModulo
      4   RTC_start
      4   RTC_stop


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  RTC_clearInterrupt
      10  RTC_disableInterrupt
      10  RTC_enableInterrupt
      14  RTC_getInterruptStatus
      20  RTC_init
       8  RTC_setModulo
      18  RTC_start
       8  RTC_stop

 
 94 bytes in segment CODE
 
 94 bytes of CODE memory

Errors: none
Warnings: none
