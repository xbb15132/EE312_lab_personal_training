###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           19/Nov/2015  14:22:15
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\framctl.c
#    Command line  =  
#        I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\framctl.c -lcN
#        I:\IAR\EE312\Lab_3\Debug\List\ -o I:\IAR\EE312\Lab_3\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR4133__ -e --double=32 --dlib_config
#        E:\IAR-new\430\lib\dlib\dl430xlsfn.h -I I:\IAR\EE312\Lab_3\..\ -I
#        I:\IAR\EE312\Lab_3\..\driverlib\MSP430FR2xx_4xx\ --core=430X
#        --data_model=small -Ol --hw_workaround=CPU40 --segment __data16=DATA16
#        --segment __data20=DATA20 --code_model=large
#    List file     =  I:\IAR\EE312\Lab_3\Debug\List\framctl.lst
#    Object file   =  I:\IAR\EE312\Lab_3\Debug\Obj\framctl.r43
#
###############################################################################

I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\framctl.c
      1          /* --COPYRIGHT--,BSD
      2           * Copyright (c) 2014, Texas Instruments Incorporated
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * *  Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           *
     12           * *  Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in the
     14           *    documentation and/or other materials provided with the distribution.
     15           *
     16           * *  Neither the name of Texas Instruments Incorporated nor the names of
     17           *    its contributors may be used to endorse or promote products derived
     18           *    from this software without specific prior written permission.
     19           *
     20           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21           * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     22           * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     23           * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     24           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     25           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     26           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
     27           * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     28           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     29           * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           * --/COPYRIGHT--*/
     32          //*****************************************************************************
     33          //
     34          // framctl.c - Driver for the framctl Module.
     35          //
     36          //*****************************************************************************
     37          
     38          //*****************************************************************************
     39          //
     40          //! \addtogroup framctl_api framctl
     41          //! @{
     42          //
     43          //*****************************************************************************
     44          
     45          #include "inc/hw_regaccess.h"
     46          #include "inc/hw_memmap.h"
     47          
     48          #ifdef __MSP430_HAS_FRAM__
     49          #include "framctl.h"
     50          
     51          #include <assert.h>
     52          
     53          void FRAMCtl_write8(uint8_t *dataPtr,
     54                              uint8_t *framPtr,
     55                              uint16_t numberOfBytes)
     56          {
     57              //Get previous write protection setting
     58              uint8_t state = HWREG8(SYS_BASE + OFS_SYSCFG0_L);
     59          #ifdef __MSP430_HAS_FRWPPW__
     60              HWREG16(SYS_BASE + OFS_SYSCFG0) = FWPW | (state & ~(DFWP | PFWP));
     61          #else
     62              HWREG8(SYS_BASE + OFS_SYSCFG0_L) &= ~(DFWP | PFWP);
     63          #endif
     64          
     65              while(numberOfBytes > 0)
     66              {
     67                  //Write to Fram
     68                  *framPtr++ = *dataPtr++;
     69                  numberOfBytes--;
     70              }
     71          
     72              //Restore previous write protection setting
     73          #ifdef __MSP430_HAS_FRWPPW__
     74              HWREG16(SYS_BASE + OFS_SYSCFG0) = FWPW | state;
     75          #else
     76              HWREG8(SYS_BASE + OFS_SYSCFG0_L) = state;
     77          #endif
     78          }
     79          
     80          void FRAMCtl_write16(uint16_t *dataPtr,
     81                               uint16_t *framPtr,
     82                               uint16_t numberOfWords)
     83          {
     84              //Get previous write protection setting
     85              uint8_t state = HWREG8(SYS_BASE + OFS_SYSCFG0_L);
     86          #ifdef __MSP430_HAS_FRWPPW__
     87              HWREG16(SYS_BASE + OFS_SYSCFG0) = FWPW | (state & ~(DFWP | PFWP));
     88          #else
     89              HWREG8(SYS_BASE + OFS_SYSCFG0_L) &= ~(DFWP | PFWP);
     90          #endif
     91          
     92              while(numberOfWords > 0)
     93              {
     94                  //Write to Fram
     95                  *framPtr++ = *dataPtr++;
     96                  numberOfWords--;
     97              }
     98          
     99              //Restore previous write protection setting
    100          #ifdef __MSP430_HAS_FRWPPW__
    101              HWREG16(SYS_BASE + OFS_SYSCFG0) = FWPW | state;
    102          #else
    103              HWREG8(SYS_BASE + OFS_SYSCFG0_L) = state;
    104          #endif
    105          }
    106          
    107          void FRAMCtl_write32(uint32_t *dataPtr,
    108                               uint32_t *framPtr,
    109                               uint16_t count)
    110          {
    111              //Get previous write protection setting
    112              uint8_t state = HWREG8(SYS_BASE + OFS_SYSCFG0_L);
    113          #ifdef __MSP430_HAS_FRWPPW__
    114              HWREG16(SYS_BASE + OFS_SYSCFG0) = FWPW | (state & ~(DFWP | PFWP));
    115          #else
    116              HWREG8(SYS_BASE + OFS_SYSCFG0_L) &= ~(DFWP | PFWP);
    117          #endif
    118          
    119              while(count > 0)
    120              {
    121                  //Write to Fram
    122                  *framPtr++ = *dataPtr++;
    123                  count--;
    124              }
    125          
    126              //Restore previous write protection setting
    127          #ifdef __MSP430_HAS_FRWPPW__
    128              HWREG16(SYS_BASE + OFS_SYSCFG0) = FWPW | state;
    129          #else
    130              HWREG8(SYS_BASE + OFS_SYSCFG0_L) = state;
    131          #endif
    132          }
    133          
    134          void FRAMCtl_fillMemory32(uint32_t value,
    135                                    uint32_t *framPtr,
    136                                    uint16_t count)
    137          {
    138              //Get previous write protection setting
    139              uint8_t state = HWREG8(SYS_BASE + OFS_SYSCFG0_L);
    140          #ifdef __MSP430_HAS_FRWPPW__
    141              HWREG16(SYS_BASE + OFS_SYSCFG0) = FWPW | (state & ~(DFWP | PFWP));
    142          #else
    143              HWREG8(SYS_BASE + OFS_SYSCFG0_L) &= ~(DFWP | PFWP);
    144          #endif
    145          
    146              while(count > 0)
    147              {
    148                  //Write to Fram
    149                  *framPtr++ = value;
    150                  count--;
    151              }
    152          
    153              //Restore previous write protection setting
    154          #ifdef __MSP430_HAS_FRWPPW__
    155              HWREG16(SYS_BASE + OFS_SYSCFG0) = FWPW | state;
    156          #else
    157              HWREG8(SYS_BASE + OFS_SYSCFG0_L) = state;
    158          #endif
    159          }
    160          
    161          void FRAMCtl_enableInterrupt(uint8_t interruptMask)
    162          {
    163              uint8_t waitSelection;
    164          
    165              waitSelection = (HWREG8(FRAM_BASE + OFS_FRCTL0) & 0xFF);
    166              // Clear lock in FRAM control registers
    167              HWREG16(FRAM_BASE + OFS_FRCTL0) = FWPW | waitSelection;
    168          
    169              // Enable user selected interrupt sources
    170              HWREG16(FRAM_BASE + OFS_GCCTL0) |= interruptMask;
    171          }
    172          
    173          uint8_t FRAMCtl_getInterruptStatus(uint16_t interruptFlagMask)
    174          {
    175              return (HWREG16(FRAM_BASE + OFS_GCCTL1) & interruptFlagMask);
    176          }
    177          
    178          void FRAMCtl_disableInterrupt(uint16_t interruptMask)
    179          {
    180              uint8_t waitSelection;
    181          
    182              waitSelection = (HWREG8(FRAM_BASE + OFS_FRCTL0) & 0xFF);
    183              //Clear lock in FRAM control registers
    184              HWREG16(FRAM_BASE + OFS_FRCTL0) = FWPW | waitSelection;
    185          
    186              HWREG16(FRAM_BASE + OFS_GCCTL0) &= ~(interruptMask);
    187          }
    188          
    189          void FRAMCtl_configureWaitStateControl(uint8_t waitState)
    190          {
    191              // Clear lock in FRAM control registers
    192              HWREG16(FRAM_BASE + OFS_FRCTL0) = FWPW;
    193          
    194              HWREG8(FRAM_BASE + OFS_FRCTL0_L) &= ~NWAITS_7;
    195              HWREG8(FRAM_BASE + OFS_FRCTL0_L) |= (waitState);
    196          }
    197          
    198          void FRAMCtl_delayPowerUpFromLPM(uint8_t delayStatus)
    199          {
    200              uint8_t waitSelection;
    201          
    202              waitSelection = (HWREG8(FRAM_BASE + OFS_FRCTL0) & 0xFF);
    203          
    204              // Clear lock in FRAM control registers
    205              HWREG16(FRAM_BASE + OFS_FRCTL0) = FWPW | waitSelection;
    206          
    207              HWREG8(FRAM_BASE + OFS_GCCTL0_L) &= ~0x02;
    208              HWREG8(FRAM_BASE + OFS_GCCTL0_L) |= delayStatus;
    209          }
    210          
    211          #endif
    212          //*****************************************************************************
    213          //
    214          //! Close the doxygen group for framctl_api
    215          //! @}
    216          //
    217          //*****************************************************************************

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   FRAMCtl_configureWaitStateControl
      4   FRAMCtl_delayPowerUpFromLPM
      4   FRAMCtl_disableInterrupt
      4   FRAMCtl_enableInterrupt
      6   FRAMCtl_fillMemory32
      4   FRAMCtl_getInterruptStatus
      4   FRAMCtl_write16
      4   FRAMCtl_write32
      4   FRAMCtl_write8


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  FRAMCtl_configureWaitStateControl
      24  FRAMCtl_delayPowerUpFromLPM
      20  FRAMCtl_disableInterrupt
      22  FRAMCtl_enableInterrupt
      38  FRAMCtl_fillMemory32
      10  FRAMCtl_getInterruptStatus
      32  FRAMCtl_write16
      38  FRAMCtl_write32
      32  FRAMCtl_write8

 
 234 bytes in segment CODE
 
 234 bytes of CODE memory

Errors: none
Warnings: none
