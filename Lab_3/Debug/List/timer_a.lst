###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           19/Nov/2015  14:22:17
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\timer_a.c
#    Command line  =  
#        I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\timer_a.c -lcN
#        I:\IAR\EE312\Lab_3\Debug\List\ -o I:\IAR\EE312\Lab_3\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR4133__ -e --double=32 --dlib_config
#        E:\IAR-new\430\lib\dlib\dl430xlsfn.h -I I:\IAR\EE312\Lab_3\..\ -I
#        I:\IAR\EE312\Lab_3\..\driverlib\MSP430FR2xx_4xx\ --core=430X
#        --data_model=small -Ol --hw_workaround=CPU40 --segment __data16=DATA16
#        --segment __data20=DATA20 --code_model=large
#    List file     =  I:\IAR\EE312\Lab_3\Debug\List\timer_a.lst
#    Object file   =  I:\IAR\EE312\Lab_3\Debug\Obj\timer_a.r43
#
###############################################################################

I:\IAR\EE312\driverlib\MSP430FR2xx_4xx\timer_a.c
      1          /* --COPYRIGHT--,BSD
      2           * Copyright (c) 2014, Texas Instruments Incorporated
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * *  Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           *
     12           * *  Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in the
     14           *    documentation and/or other materials provided with the distribution.
     15           *
     16           * *  Neither the name of Texas Instruments Incorporated nor the names of
     17           *    its contributors may be used to endorse or promote products derived
     18           *    from this software without specific prior written permission.
     19           *
     20           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21           * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     22           * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     23           * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     24           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     25           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     26           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
     27           * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     28           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     29           * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           * --/COPYRIGHT--*/
     32          //*****************************************************************************
     33          //
     34          // timer_a.c - Driver for the timer_a Module.
     35          //
     36          //*****************************************************************************
     37          
     38          //*****************************************************************************
     39          //
     40          //! \addtogroup timer_a_api timer_a
     41          //! @{
     42          //
     43          //*****************************************************************************
     44          
     45          #include "inc/hw_regaccess.h"
     46          #include "inc/hw_memmap.h"
     47          
     48          #ifdef __MSP430_HAS_TxA7__
     49          #include "timer_a.h"
     50          
     51          #include <assert.h>
     52          
     53          void Timer_A_startCounter(uint16_t baseAddress,
     54                                    uint16_t timerMode)
     55          {
     56              HWREG16(baseAddress + OFS_TAxCTL) |= timerMode;
     57          }
     58          
     59          void Timer_A_initContinuousMode(uint16_t baseAddress,
     60                                          Timer_A_initContinuousModeParam *param)
     61          {
     62              HWREG16(baseAddress +
     63                      OFS_TAxCTL) &= ~(TIMER_A_CLOCKSOURCE_INVERTED_EXTERNAL_TXCLK +
     64                                       TIMER_A_UPDOWN_MODE +
     65                                       TIMER_A_DO_CLEAR +
     66                                       TIMER_A_TAIE_INTERRUPT_ENABLE +
     67                                       ID__8
     68                                       );
     69              HWREG16(baseAddress + OFS_TAxEX0) &= ~TAIDEX_7;
     70          
     71              HWREG16(baseAddress + OFS_TAxEX0) |= param->clockSourceDivider & 0x7;
     72              HWREG16(baseAddress + OFS_TAxCTL) |= (param->clockSource +
     73                                                    param->timerClear +
     74                                                    param->timerInterruptEnable_TAIE +
     75                                                    ((param->clockSourceDivider >>
     76                                                      3) << 6));
     77          
     78              if(param->startTimer)
     79              {
     80                  HWREG16(baseAddress + OFS_TAxCTL) |= TIMER_A_CONTINUOUS_MODE;
     81              }
     82          }
     83          
     84          void Timer_A_initUpMode(uint16_t baseAddress,
     85                                  Timer_A_initUpModeParam *param)
     86          {
     87              HWREG16(baseAddress + OFS_TAxCTL) &=
     88                  ~(TIMER_A_CLOCKSOURCE_INVERTED_EXTERNAL_TXCLK +
     89                    TIMER_A_UPDOWN_MODE +
     90                    TIMER_A_DO_CLEAR +
     91                    TIMER_A_TAIE_INTERRUPT_ENABLE +
     92                    ID__8
     93                    );
     94              HWREG16(baseAddress + OFS_TAxEX0) &= ~TAIDEX_7;
     95          
     96              HWREG16(baseAddress + OFS_TAxEX0) |= param->clockSourceDivider & 0x7;
     97              HWREG16(baseAddress + OFS_TAxCTL) |= (param->clockSource +
     98                                                    param->timerClear +
     99                                                    param->timerInterruptEnable_TAIE +
    100                                                    ((param->clockSourceDivider >>
    101                                                      3) << 6));
    102          
    103              if(param->startTimer)
    104              {
    105                  HWREG16(baseAddress + OFS_TAxCTL) |= TIMER_A_UP_MODE;
    106              }
    107          
    108              if(TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE ==
    109                 param->captureCompareInterruptEnable_CCR0_CCIE)
    110              {
    111                  HWREG16(baseAddress +
    112                          OFS_TAxCCTL0) |= TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;
    113              }
    114              else
    115              {
    116                  HWREG16(baseAddress +
    117                          OFS_TAxCCTL0) &= ~TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;
    118              }
    119          
    120              HWREG16(baseAddress + OFS_TAxCCR0) = param->timerPeriod;
    121          }
    122          
    123          void Timer_A_initUpDownMode(uint16_t baseAddress,
    124                                      Timer_A_initUpDownModeParam *param)
    125          {
    126              HWREG16(baseAddress + OFS_TAxCTL) &=
    127                  ~(TIMER_A_CLOCKSOURCE_INVERTED_EXTERNAL_TXCLK +
    128                    TIMER_A_UPDOWN_MODE +
    129                    TIMER_A_DO_CLEAR +
    130                    TIMER_A_TAIE_INTERRUPT_ENABLE +
    131                    ID__8
    132                    );
    133              HWREG16(baseAddress + OFS_TAxEX0) &= ~TAIDEX_7;
    134          
    135              HWREG16(baseAddress + OFS_TAxEX0) |= param->clockSourceDivider & 0x7;
    136              HWREG16(baseAddress + OFS_TAxCTL) |= (param->clockSource +
    137                                                    param->timerClear +
    138                                                    param->timerInterruptEnable_TAIE +
    139                                                    ((param->clockSourceDivider >>
    140                                                      3) << 6));
    141          
    142              if(param->startTimer)
    143              {
    144                  HWREG16(baseAddress + OFS_TAxCTL) |= TIMER_A_UPDOWN_MODE;
    145              }
    146          
    147              if(TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE ==
    148                 param->captureCompareInterruptEnable_CCR0_CCIE)
    149              {
    150                  HWREG16(baseAddress +
    151                          OFS_TAxCCTL0) |= TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;
    152              }
    153              else
    154              {
    155                  HWREG16(baseAddress +
    156                          OFS_TAxCCTL0) &= ~TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;
    157              }
    158          
    159              HWREG16(baseAddress + OFS_TAxCCR0) = param->timerPeriod;
    160          }
    161          
    162          void Timer_A_initCaptureMode(uint16_t baseAddress,
    163                                       Timer_A_initCaptureModeParam *param)
    164          {
    165              HWREG16(baseAddress + param->captureRegister) |= CAP;
    166          
    167              HWREG16(baseAddress + param->captureRegister) &=
    168                  ~(TIMER_A_CAPTUREMODE_RISING_AND_FALLING_EDGE +
    169                    TIMER_A_CAPTURE_INPUTSELECT_Vcc +
    170                    TIMER_A_CAPTURE_SYNCHRONOUS +
    171                    TIMER_A_DO_CLEAR +
    172                    TIMER_A_TAIE_INTERRUPT_ENABLE +
    173                    CM_3
    174                    );
    175          
    176              HWREG16(baseAddress + param->captureRegister) |= (param->captureMode +
    177                                                                param->captureInputSelect
    178                                                                +
    179                                                                param->
    180                                                                synchronizeCaptureSource +
    181                                                                param->
    182                                                                captureInterruptEnable +
    183                                                                param->captureOutputMode
    184                                                                );
    185          }
    186          
    187          void Timer_A_initCompareMode(uint16_t baseAddress,
    188                                       Timer_A_initCompareModeParam *param)
    189          {
    190              HWREG16(baseAddress + param->compareRegister) &= ~CAP;
    191          
    192              HWREG16(baseAddress + param->compareRegister) &=
    193                  ~(TIMER_A_CAPTURECOMPARE_INTERRUPT_ENABLE +
    194                    TIMER_A_OUTPUTMODE_RESET_SET
    195                    );
    196          
    197              HWREG16(baseAddress +
    198                      param->compareRegister) |= (param->compareInterruptEnable +
    199                                                  param->compareOutputMode
    200                                                  );
    201          
    202              HWREG16(baseAddress + param->compareRegister +
    203                      OFS_TAxR) = param->compareValue;
    204          }
    205          
    206          void Timer_A_enableInterrupt(uint16_t baseAddress)
    207          {
    208              HWREG16(baseAddress + OFS_TAxCTL) |= TAIE;
    209          }
    210          
    211          void Timer_A_disableInterrupt(uint16_t baseAddress)
    212          {
    213              HWREG16(baseAddress + OFS_TAxCTL) &= ~TAIE;
    214          }
    215          
    216          uint32_t Timer_A_getInterruptStatus(uint16_t baseAddress)
    217          {
    218              return (HWREG16(baseAddress + OFS_TAxCTL) & TAIFG);
    219          }
    220          
    221          void Timer_A_enableCaptureCompareInterrupt(uint16_t baseAddress,
    222                                                     uint16_t captureCompareRegister)
    223          {
    224              HWREG16(baseAddress + captureCompareRegister) |= CCIE;
    225          }
    226          
    227          void Timer_A_disableCaptureCompareInterrupt(uint16_t baseAddress,
    228                                                      uint16_t captureCompareRegister)
    229          {
    230              HWREG16(baseAddress + captureCompareRegister) &= ~CCIE;
    231          }
    232          
    233          uint32_t Timer_A_getCaptureCompareInterruptStatus(uint16_t baseAddress,
    234                                                            uint16_t captureCompareRegister,
    235                                                            uint16_t mask)
    236          {
    237              return (HWREG16(baseAddress + captureCompareRegister) & mask);
    238          }
    239          
    240          void Timer_A_clear(uint16_t baseAddress)
    241          {
    242              HWREG16(baseAddress + OFS_TAxCTL) |= TACLR;
    243          }
    244          
    245          uint8_t Timer_A_getSynchronizedCaptureCompareInput(uint16_t baseAddress,
    246                                                             uint16_t captureCompareRegister,
    247                                                             uint16_t synchronized)
    248          {
    249              if(HWREG16(baseAddress + captureCompareRegister) & synchronized)
    250              {
    251                  return (TIMER_A_CAPTURECOMPARE_INPUT_HIGH);
    252              }
    253              else
    254              {
    255                  return (TIMER_A_CAPTURECOMPARE_INPUT_LOW);
    256              }
    257          }
    258          
    259          uint8_t Timer_A_getOutputForOutputModeOutBitValue(uint16_t baseAddress,
    260                                                            uint16_t captureCompareRegister)
    261          {
    262              if(HWREG16(baseAddress + captureCompareRegister) & OUT)
    263              {
    264                  return (TIMER_A_OUTPUTMODE_OUTBITVALUE_HIGH);
    265              }
    266              else
    267              {
    268                  return (TIMER_A_OUTPUTMODE_OUTBITVALUE_LOW);
    269              }
    270          }
    271          
    272          uint16_t Timer_A_getCaptureCompareCount(uint16_t baseAddress,
    273                                                  uint16_t captureCompareRegister)
    274          {
    275              return  (HWREG16(baseAddress + OFS_TAxR + captureCompareRegister));
    276          }
    277          
    278          void Timer_A_setOutputForOutputModeOutBitValue(uint16_t baseAddress,
    279                                                         uint16_t captureCompareRegister,
    280                                                         uint8_t outputModeOutBitValue)
    281          {
    282              HWREG16(baseAddress + captureCompareRegister) &= ~OUT;
    283              HWREG16(baseAddress + captureCompareRegister) |= outputModeOutBitValue;
    284          }
    285          
    286          void Timer_A_outputPWM(uint16_t baseAddress,
    287                                 Timer_A_outputPWMParam *param)
    288          {
    289              HWREG16(baseAddress + OFS_TAxCTL) &=
    290                  ~(TIMER_A_CLOCKSOURCE_INVERTED_EXTERNAL_TXCLK +
    291                    TIMER_A_UPDOWN_MODE + TIMER_A_DO_CLEAR +
    292                    TIMER_A_TAIE_INTERRUPT_ENABLE +
    293                    ID__8
    294                    );
    295              HWREG16(baseAddress + OFS_TAxEX0) &= ~TAIDEX_7;
    296          
    297              HWREG16(baseAddress + OFS_TAxEX0) |= param->clockSourceDivider & 0x7;
    298              HWREG16(baseAddress + OFS_TAxCTL) |= (param->clockSource +
    299                                                    TIMER_A_UP_MODE +
    300                                                    TIMER_A_DO_CLEAR +
    301                                                    ((param->clockSourceDivider >>
    302                                                      3) << 6));
    303          
    304              HWREG16(baseAddress + OFS_TAxCCR0) = param->timerPeriod;
    305          
    306              HWREG16(baseAddress + OFS_TAxCCTL0) &=
    307                  ~(TIMER_A_CAPTURECOMPARE_INTERRUPT_ENABLE +
    308                    TIMER_A_OUTPUTMODE_RESET_SET);
    309          
    310              HWREG16(baseAddress + param->compareRegister) |= param->compareOutputMode;
    311          
    312              HWREG16(baseAddress + param->compareRegister + OFS_TAxR) = param->dutyCycle;
    313          }
    314          
    315          void Timer_A_stop(uint16_t baseAddress)
    316          {
    317              HWREG16(baseAddress + OFS_TAxCTL) &= ~MC_3;
    318          }
    319          
    320          void Timer_A_setCompareValue(uint16_t baseAddress,
    321                                       uint16_t compareRegister,
    322                                       uint16_t compareValue)
    323          {
    324              HWREG16(baseAddress + compareRegister + OFS_TAxR) = compareValue;
    325          }
    326          
    327          void Timer_A_clearTimerInterrupt(uint16_t baseAddress)
    328          {
    329              HWREG16(baseAddress + OFS_TAxCTL) &= ~TAIFG;
    330          }
    331          
    332          void Timer_A_clearCaptureCompareInterrupt(uint16_t baseAddress,
    333                                                    uint16_t captureCompareRegister)
    334          {
    335              HWREG16(baseAddress + captureCompareRegister) &= ~CCIFG;
    336          }
    337          
    338          uint16_t Timer_A_getCounterValue(uint16_t baseAddress)
    339          {
    340              uint16_t voteOne, voteTwo, res;
    341          
    342              voteTwo = HWREG16(baseAddress + OFS_TAxR);
    343          
    344              do
    345              {
    346                  voteOne = voteTwo;
    347                  voteTwo = HWREG16(baseAddress + OFS_TAxR);
    348          
    349                  if(voteTwo > voteOne)
    350                  {
    351                      res = voteTwo - voteOne;
    352                  }
    353                  else if(voteOne > voteTwo)
    354                  {
    355                      res = voteOne - voteTwo;
    356                  }
    357                  else
    358                  {
    359                      res = 0;
    360                  }
    361              }
    362              while(res > TIMER_A_THRESHOLD);
    363          
    364              return(voteTwo);
    365          }
    366          
    367          #endif
    368          //*****************************************************************************
    369          //
    370          //! Close the doxygen group for timer_a_api
    371          //! @}
    372          //
    373          //*****************************************************************************

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Timer_A_clear
      4   Timer_A_clearCaptureCompareInterrupt
      4   Timer_A_clearTimerInterrupt
      4   Timer_A_disableCaptureCompareInterrupt
      4   Timer_A_disableInterrupt
      4   Timer_A_enableCaptureCompareInterrupt
      4   Timer_A_enableInterrupt
      4   Timer_A_getCaptureCompareCount
      4   Timer_A_getCaptureCompareInterruptStatus
      4   Timer_A_getCounterValue
      4   Timer_A_getInterruptStatus
      4   Timer_A_getOutputForOutputModeOutBitValue
      4   Timer_A_getSynchronizedCaptureCompareInput
      4   Timer_A_initCaptureMode
      4   Timer_A_initCompareMode
      4   Timer_A_initContinuousMode
      4   Timer_A_initUpDownMode
      4   Timer_A_initUpMode
      4   Timer_A_outputPWM
      4   Timer_A_setCompareValue
      4   Timer_A_setOutputForOutputModeOutBitValue
      4   Timer_A_startCounter
      4   Timer_A_stop


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  Timer_A_clear
       8  Timer_A_clearCaptureCompareInterrupt
       6  Timer_A_clearTimerInterrupt
      10  Timer_A_disableCaptureCompareInterrupt
       6  Timer_A_disableInterrupt
      10  Timer_A_enableCaptureCompareInterrupt
       6  Timer_A_enableInterrupt
      10  Timer_A_getCaptureCompareCount
      10  Timer_A_getCaptureCompareInterruptStatus
      50  Timer_A_getCounterValue
       8  Timer_A_getInterruptStatus
      16  Timer_A_getOutputForOutputModeOutBitValue
      16  Timer_A_getSynchronizedCaptureCompareInput
      48  Timer_A_initCaptureMode
      50  Timer_A_initCompareMode
      76  Timer_A_initContinuousMode
     116  Timer_A_initUpDownMode
     118  Timer_A_initUpMode
     106  Timer_A_outputPWM
      12  Timer_A_setCompareValue
      18  Timer_A_setOutputForOutputModeOutBitValue
       6  Timer_A_startCounter
       8  Timer_A_stop

 
 720 bytes in segment CODE
 
 720 bytes of CODE memory

Errors: none
Warnings: none
