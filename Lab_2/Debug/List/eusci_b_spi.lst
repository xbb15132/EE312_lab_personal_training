###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           07/Nov/2015  19:53:04
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        I:\GitHub\xbb15132\driverlib\MSP430FR2xx_4xx\eusci_b_spi.c
#    Command line  =  
#        I:\GitHub\xbb15132\driverlib\MSP430FR2xx_4xx\eusci_b_spi.c -lcN
#        I:\GitHub\xbb15132\Lab_2\Debug\List\ -o
#        I:\GitHub\xbb15132\Lab_2\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR4133__ -e --double=32
#        --dlib_config E:\IAR-new\430\lib\dlib\dl430xlsfn.h -I
#        I:\GitHub\xbb15132\Lab_2\..\ -I
#        I:\GitHub\xbb15132\Lab_2\..\driverlib\MSP430FR2xx_4xx\ --core=430X
#        --data_model=small -Ol --hw_workaround=CPU40 --segment __data16=DATA16
#        --segment __data20=DATA20 --code_model=large
#    List file     =  I:\GitHub\xbb15132\Lab_2\Debug\List\eusci_b_spi.lst
#    Object file   =  I:\GitHub\xbb15132\Lab_2\Debug\Obj\eusci_b_spi.r43
#
###############################################################################

I:\GitHub\xbb15132\driverlib\MSP430FR2xx_4xx\eusci_b_spi.c
      1          /* --COPYRIGHT--,BSD
      2           * Copyright (c) 2014, Texas Instruments Incorporated
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * *  Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           *
     12           * *  Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in the
     14           *    documentation and/or other materials provided with the distribution.
     15           *
     16           * *  Neither the name of Texas Instruments Incorporated nor the names of
     17           *    its contributors may be used to endorse or promote products derived
     18           *    from this software without specific prior written permission.
     19           *
     20           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21           * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     22           * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     23           * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     24           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     25           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     26           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
     27           * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     28           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     29           * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           * --/COPYRIGHT--*/
     32          //*****************************************************************************
     33          //
     34          // eusci_b_spi.c - Driver for the eusci_b_spi Module.
     35          //
     36          //*****************************************************************************
     37          
     38          //*****************************************************************************
     39          //
     40          //! \addtogroup eusci_b_spi_api eusci_b_spi
     41          //! @{
     42          //
     43          //*****************************************************************************
     44          
     45          #include "inc/hw_regaccess.h"
     46          #include "inc/hw_memmap.h"
     47          
     48          #ifdef __MSP430_HAS_EUSCI_Bx__
     49          #include "eusci_b_spi.h"
     50          
     51          #include <assert.h>
     52          
     53          void EUSCI_B_SPI_initMaster(uint16_t baseAddress,
     54                                      EUSCI_B_SPI_initMasterParam *param)
     55          {
     56              //Disable the USCI Module
     57              HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
     58          
     59              //Reset OFS_UCBxCTLW0 values
     60              HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCCKPH + UCCKPL + UC7BIT + UCMSB +
     61                                                        UCMST + UCMODE_3 + UCSYNC);
     62          
     63              //Reset OFS_UCBxCTLW0 values
     64              HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCSSEL_3);
     65          
     66              //Select Clock
     67              HWREG16(baseAddress + OFS_UCBxCTLW0) |= param->selectClockSource;
     68          
     69              HWREG16(baseAddress + OFS_UCBxBRW) =
     70                  (uint16_t)(param->clockSourceFrequency / param->desiredSpiClock);
     71          
     72              /*
     73               * Configure as SPI master mode.
     74               * Clock phase select, polarity, msb
     75               * UCMST = Master mode
     76               * UCSYNC = Synchronous mode
     77               * UCMODE_0 = 3-pin SPI
     78               */
     79              HWREG16(baseAddress + OFS_UCBxCTLW0) |= (
     80                  param->msbFirst +
     81                  param->clockPhase +
     82                  param->clockPolarity +
     83                  UCMST +
     84                  UCSYNC +
     85                  param->spiMode
     86                  );
     87          }
     88          
     89          void EUSCI_B_SPI_select4PinFunctionality(uint16_t baseAddress,
     90                                                   uint8_t select4PinFunctionality)
     91          {
     92              HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~UCSTEM;
     93              HWREG16(baseAddress + OFS_UCBxCTLW0) |= select4PinFunctionality;
     94          }
     95          
     96          void EUSCI_B_SPI_changeMasterClock(uint16_t baseAddress,
     97                                             EUSCI_B_SPI_changeMasterClockParam *param)
     98          {
     99              //Disable the USCI Module
    100              HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
    101          
    102              HWREG16(baseAddress + OFS_UCBxBRW) =
    103                  (uint16_t)(param->clockSourceFrequency / param->desiredSpiClock);
    104          
    105              //Reset the UCSWRST bit to enable the USCI Module
    106              HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCSWRST);
    107          }
    108          
    109          void EUSCI_B_SPI_initSlave(uint16_t baseAddress,
    110                                     EUSCI_B_SPI_initSlaveParam *param)
    111          {
    112              //Disable USCI Module
    113              HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
    114          
    115              //Reset OFS_UCBxCTLW0 register
    116              HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCMSB +
    117                                                        UC7BIT +
    118                                                        UCMST +
    119                                                        UCCKPL +
    120                                                        UCCKPH +
    121                                                        UCMODE_3
    122                                                        );
    123          
    124              //Clock polarity, phase select, msbFirst, SYNC, Mode0
    125              HWREG16(baseAddress + OFS_UCBxCTLW0) |= (param->clockPhase +
    126                                                       param->clockPolarity +
    127                                                       param->msbFirst +
    128                                                       UCSYNC +
    129                                                       param->spiMode
    130                                                       );
    131          }
    132          
    133          void EUSCI_B_SPI_changeClockPhasePolarity(uint16_t baseAddress,
    134                                                    uint16_t clockPhase,
    135                                                    uint16_t clockPolarity)
    136          {
    137              //Disable the USCI Module
    138              HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
    139          
    140              HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCCKPH + UCCKPL);
    141          
    142              HWREG16(baseAddress + OFS_UCBxCTLW0) |= (
    143                  clockPhase +
    144                  clockPolarity
    145                  );
    146          
    147              //Reset the UCSWRST bit to enable the USCI Module
    148              HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCSWRST);
    149          }
    150          
    151          void EUSCI_B_SPI_transmitData(uint16_t baseAddress,
    152                                        uint8_t transmitData)
    153          {
    154              HWREG16(baseAddress + OFS_UCBxTXBUF) = transmitData;
    155          }
    156          
    157          uint8_t EUSCI_B_SPI_receiveData(uint16_t baseAddress)
    158          {
    159              return (HWREG16(baseAddress + OFS_UCBxRXBUF));
    160          }
    161          
    162          void EUSCI_B_SPI_enableInterrupt(uint16_t baseAddress,
    163                                           uint8_t mask)
    164          {
    165              HWREG16(baseAddress + OFS_UCBxIE) |= mask;
    166          }
    167          
    168          void EUSCI_B_SPI_disableInterrupt(uint16_t baseAddress,
    169                                            uint8_t mask)
    170          {
    171              HWREG16(baseAddress + OFS_UCBxIE) &= ~mask;
    172          }
    173          
    174          uint8_t EUSCI_B_SPI_getInterruptStatus(uint16_t baseAddress,
    175                                                 uint8_t mask)
    176          {
    177              return (HWREG16(baseAddress + OFS_UCBxIFG) & mask);
    178          }
    179          
    180          void EUSCI_B_SPI_clearInterrupt(uint16_t baseAddress,
    181                                          uint8_t mask)
    182          {
    183              HWREG16(baseAddress + OFS_UCBxIFG) &= ~mask;
    184          }
    185          
    186          void EUSCI_B_SPI_enable(uint16_t baseAddress)
    187          {
    188              //Reset the UCSWRST bit to enable the USCI Module
    189              HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCSWRST);
    190          }
    191          
    192          void EUSCI_B_SPI_disable(uint16_t baseAddress)
    193          {
    194              //Set the UCSWRST bit to disable the USCI Module
    195              HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
    196          }
    197          
    198          uint32_t EUSCI_B_SPI_getReceiveBufferAddress(uint16_t baseAddress)
    199          {
    200              return (baseAddress + OFS_UCBxRXBUF);
    201          }
    202          
    203          uint32_t EUSCI_B_SPI_getTransmitBufferAddress(uint16_t baseAddress)
    204          {
    205              return (baseAddress + OFS_UCBxTXBUF);
    206          }
    207          
    208          uint16_t EUSCI_B_SPI_isBusy(uint16_t baseAddress)
    209          {
    210              //Return the bus busy status.
    211              return (HWREG16(baseAddress + OFS_UCBxSTATW) & UCBUSY);
    212          }
    213          
    214          #endif
    215          //*****************************************************************************
    216          //
    217          //! Close the doxygen group for eusci_b_spi_api
    218          //! @}
    219          //
    220          //*****************************************************************************

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   EUSCI_B_SPI_changeClockPhasePolarity
      6   EUSCI_B_SPI_changeMasterClock
        6 ?DivMod32u
      4   EUSCI_B_SPI_clearInterrupt
      4   EUSCI_B_SPI_disable
      4   EUSCI_B_SPI_disableInterrupt
      4   EUSCI_B_SPI_enable
      4   EUSCI_B_SPI_enableInterrupt
      4   EUSCI_B_SPI_getInterruptStatus
      4   EUSCI_B_SPI_getReceiveBufferAddress
      4   EUSCI_B_SPI_getTransmitBufferAddress
      8   EUSCI_B_SPI_initMaster
        8 ?DivMod32u
      4   EUSCI_B_SPI_initSlave
      4   EUSCI_B_SPI_isBusy
      4   EUSCI_B_SPI_receiveData
      4   EUSCI_B_SPI_select4PinFunctionality
      4   EUSCI_B_SPI_transmitData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  EUSCI_B_SPI_changeClockPhasePolarity
      48  EUSCI_B_SPI_changeMasterClock
      12  EUSCI_B_SPI_clearInterrupt
       6  EUSCI_B_SPI_disable
      12  EUSCI_B_SPI_disableInterrupt
       6  EUSCI_B_SPI_enable
      12  EUSCI_B_SPI_enableInterrupt
      10  EUSCI_B_SPI_getInterruptStatus
       8  EUSCI_B_SPI_getReceiveBufferAddress
       8  EUSCI_B_SPI_getTransmitBufferAddress
      90  EUSCI_B_SPI_initMaster
      36  EUSCI_B_SPI_initSlave
       8  EUSCI_B_SPI_isBusy
       8  EUSCI_B_SPI_receiveData
      14  EUSCI_B_SPI_select4PinFunctionality
      12  EUSCI_B_SPI_transmitData

 
 314 bytes in segment CODE
 
 314 bytes of CODE memory

Errors: none
Warnings: none
